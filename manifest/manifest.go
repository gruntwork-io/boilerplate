package manifest

import (
	"encoding/json"
	"os"
	"path/filepath"
	"time"

	"github.com/gruntwork-io/go-commons/version"
)

// GeneratedFile represents a file that was generated by boilerplate
type GeneratedFile struct {
	Path string `json:"path"`
}

// ManifestEntry represents a single version entry in the versioned manifest
type ManifestEntry struct {
	Timestamp          string                 `json:"timestamp"`
	TemplateURL        string                 `json:"template_url"`
	BoilerplateVersion string                 `json:"boilerplate_version"`
	Variables          map[string]interface{} `json:"variables"`
	OutputDir          string                 `json:"output_dir"`
	Files              []GeneratedFile        `json:"files"`
}

// VersionedManifest represents the complete versioned manifest
type VersionedManifest struct {
	LatestVersion string                   `json:"latest_version"`
	Versions      map[string]ManifestEntry `json:"versions"`
}



// UpdateVersionedManifest updates the versioned manifest with a new entry
func UpdateVersionedManifest(outputDir, templateURL string, variables map[string]interface{}, files []GeneratedFile) error {
	manifestPath := filepath.Join(outputDir, "boilerplate-manifest.json")

	// Read existing manifest or create new one
	manifest := &VersionedManifest{
		Versions: make(map[string]ManifestEntry),
	}

	if data, err := os.ReadFile(manifestPath); err == nil {
		if err := json.Unmarshal(data, manifest); err != nil {
			// If unmarshal fails, start with empty manifest
			manifest = &VersionedManifest{
				Versions: make(map[string]ManifestEntry),
			}
		}
	}

	// Create new version entry
	timestamp := time.Now().UTC().Format(time.RFC3339)
	entry := ManifestEntry{
		Timestamp:          timestamp,
		TemplateURL:        templateURL,
		BoilerplateVersion: version.GetVersion(),
		Variables:          variables,
		OutputDir:          outputDir,
		Files:              files,
	}

	// Add to manifest
	manifest.Versions[timestamp] = entry
	manifest.LatestVersion = timestamp

	// Write back to file
	data, err := json.MarshalIndent(manifest, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(manifestPath, data, 0644)
}
