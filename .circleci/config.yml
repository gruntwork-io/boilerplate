env: &env
  environment:
    GRUNTWORK_INSTALLER_VERSION: v0.0.36
    MODULE_CI_VERSION: v0.53.3
    TFENV_VERSION: v2.2.2
    TERRAFORM_VERSION: 1.0.11
    TERRAGRUNT_VERSION: v0.36.1
    PACKER_VERSION: NONE
    GOLANG_VERSION: "1.18"
    GO111MODULE: auto
    # Since we are running in docker, USER doesn't get set, so we need to set it explicitly
    USER: circleci

defaults: &defaults
  resource_class: medium
  docker:
    - image: cimg/python:3.10.2
  <<: *env

orbs:
  win: circleci/windows@2.4.0
  go: circleci/go@1.7.3

install_gruntwork_utils: &install_gruntwork_utils
  name: install gruntwork utils
  command: |
    curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/"${GRUNTWORK_INSTALLER_VERSION}"/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
    gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"

    configure-environment-for-gruntwork-module \
      --terraform-version ${TERRAFORM_VERSION} \
      --terragrunt-version ${TERRAGRUNT_VERSION} \
      --go-version ${GOLANG_VERSION}

version: 2.1
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_gruntwork_utils
      - run: PATH="/home/circleci/go/bin:$PATH" build-go-binaries --app-name boilerplate --dest-path bin --ld-flags "-X github.com/gruntwork-io/go-commons/version.Version=$CIRCLE_TAG"
      - run: echo "Done building assets"
      - persist_to_workspace:
          root: .
          paths: bin

  test:
    <<: *defaults
    steps:
      - checkout
      - run: &install_gruntwork_tooling
          name: install dependencies
          command: |
            # Install the gruntwork-module-circleci-helpers and use it to configure the build environment and run tests.
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "git-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            configure-environment-for-gruntwork-module \
              --tfenv-version ${TFENV_VERSION} \
              --terraform-version ${TERRAFORM_VERSION} \
              --terragrunt-version ${TERRAGRUNT_VERSION} \
              --packer-version ${PACKER_VERSION} \
              --go-version ${GOLANG_VERSION}

            go install github.com/jstemmer/go-junit-report@latest
            go install golang.org/x/tools/cmd/goimports@latest

            # Install OpenTofu: https://opentofu.org/docs/intro/install/deb/
            curl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
            chmod +x install-opentofu.sh
            ./install-opentofu.sh --install-method deb
      - run:
          name: run tests
          command: |
            mkdir -p /tmp/logs/results

            # We exclude the examples and test-fixtures folders as they contain example Go code, sometimes with Go
            # templating syntax in it, and that code is not meant to have automated tests run against it.
            packages_to_test="$(go list -e ./... | grep -v examples | grep -v test-fixtures | tr '\n' ' ')"

            # Add Golang's bin folder to the PATH as one of the boilerplate templates needs it to run goimports
            export PATH="/home/circleci/go/bin:$PATH"

            # Some unit tests depend on a version being set, so here we pass in the ldflags to set the version
            # to the expected test string.
            run-go-tests \
              --path . \
              --timeout 1h \
              --extra-flags "-ldflags '-X github.com/gruntwork-io/go-commons/version.Version=v1.33.7'" \
              --packages "$packages_to_test" \
              | tee /tmp/logs/all.log
          no_output_timeout: 3600s

      # Store junit test result so it shows up in the CircleCI ui
      - run:
          # Use go-junit-report to generate a junit report instead of terratest log parser, as the logs for boilerplate
          # do not respect the logging mechanism that the log parser looks for.
          name: parse logs
          command: |
            cat /tmp/logs/all.log | /home/circleci/go/bin/go-junit-report > /tmp/logs/results/results.xml
          when: always
      - store_test_results:
          path: /tmp/logs
  test_windows:
    executor:
      name: win/default
      size: "medium"
    steps:
      - checkout
      - run:
          name: Install golang
          shell: powershell.exe
          command: ./.circleci/install-golang.ps1
      - run:
          name: Install terraform
          shell: powershell.exe
          command: ./.circleci/install-terraform.ps1
      - run:
          name: Install opentofu
          shell: powershell.exe
          command: ./.circleci/install-opentofu.ps1
      - run:
          name: Install terragrunt
          shell: powershell.exe
          command: ./.circleci/install-terragrunt.ps1
      - run:
          name: Run windows tests
          shell: powershell.exe
          no_output_timeout: 45m
          command: |
            go test -tags windows -ldflags '-X github.com/gruntwork-io/go-commons/version.Version=v1.33.7' -v ./... -timeout 45m
  deploy:
    <<: *env
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: "1.18.10"
      - run:
          name: Install sign-binary-helpers
          command: |
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "sign-binary-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
      - run:
          name: Compile and sign the binaries
          command: |
            export AC_PASSWORD=${MACOS_AC_PASSWORD}
            export AC_PROVIDER=${MACOS_AC_PROVIDER}
            
            sign-binary --install-macos-sign-dependencies --os mac .gon_amd64.hcl
            sign-binary --os mac .gon_arm64.hcl
            echo "Done signing the binary"

            # Replace the files in bin. These are the same file names generated from .gon_amd64.hcl and .gon_arm64.hcl
            unzip boilerplate_darwin_amd64.zip
            mv boilerplate_darwin_amd64 bin/

            unzip boilerplate_darwin_arm64.zip
            mv boilerplate_darwin_arm64 bin/
      - run: upload-github-release-assets bin/*

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
          context:
            - GITHUB__PAT__gruntwork-ci
      - test:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
          filters:
            tags:
              only: /^v.*/
      - test_windows:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - test
            - build
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
