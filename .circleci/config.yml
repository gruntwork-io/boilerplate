version: 2.1

orbs:
  # The Windows orb give us everything we need to start using the Windows executor.
  win: circleci/windows@2.4.0

defaults: &defaults
  machine: true
  environment:
    GRUNTWORK_INSTALLER_VERSION: v0.0.21
    MODULE_CI_VERSION: v0.27.2
    TERRAFORM_VERSION: NONE
    TERRAGRUNT_VERSION: NONE
    PACKER_VERSION: NONE
    GOLANG_VERSION: "1.14"

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - run: &install_gruntwork_tooling
          name: install dependencies
          command: |
            # Install the gruntwork-module-circleci-helpers and use it to configure the build environment and run tests.
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/module-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "git-helpers" --repo "https://github.com/gruntwork-io/module-ci" --tag "${MODULE_CI_VERSION}"
            configure-environment-for-gruntwork-module \
              --terraform-version ${TERRAFORM_VERSION} \
              --terragrunt-version ${TERRAGRUNT_VERSION} \
              --packer-version ${PACKER_VERSION} \
              --go-version ${GOLANG_VERSION}
      - run:
          name: run tests
          command: run-go-tests --path . --timeout 1h
          no_output_timeout: 3600s

  testwindows:
    executor:
      name: win/default

    steps:
      - checkout
      - run:
          name: Install golang
          shell: powershell.exe
          command: |
            # Remove the old go installation
            Remove-Item 'C:\Go' -Recurse

            # Download golang, unpack it, and then update the PATH to include gobin
            $golangURI = "https://golang.org/dl/go1.14.7.windows-amd64.zip"
            $output = "go1.14.7.zip"
            # The SilentlyContinue is needed to handle access denied error. See
            # https://discuss.circleci.com/t/access-denied-error-while-trying-to-download-software-on-windows-cirlcleci-environment/32809/2
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -Uri $golangURI -OutFile $output
            Expand-Archive -LiteralPath $output -DestinationPath "C:\Go"

            # Verify installation
            C:\Go\bin\go version

      - run:
          name: Run go tests
          shell: powershell.exe
          command: |
            C:\Go\bin\go test -v ./...
            go version


  deploy:
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_gruntwork_tooling

      - run: go get github.com/mitchellh/gox

      - run:
          name: release assets
          command: |
            # If a new release is tagged in GitHub, build the binaries and upload them to GitHub.
            build-go-binaries \
              --app-name boilerplate \
              --dest-path bin \
              --ld-flags "-X main.VERSION=$CIRCLE_TAG"

            upload-github-release-assets bin/*
      - run:
          name: generate documentation
          command: |
            # Generate the latest README it in the root folder and commit it to master
            git checkout master
            bin/boilerplate_linux_amd64 --template-folder _docs --output-folder . --non-interactive --var Version=$CIRCLE_TAG
            git-add-commit-push --path README.md --message "Automatically regenerate README for version $CIRCLE_TAG" --branch-name master --git-push-behavior current

workflows:
  version: 2
  build-and-test:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
      - testwindows:
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - test
            - testwindows
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
